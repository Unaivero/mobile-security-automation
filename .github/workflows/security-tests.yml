name: Mobile Security Tests

run-name: ðŸ”’ Security Tests - ${{ github.actor }}

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '18'
  ANDROID_API_LEVEL: '30'
  ANDROID_TARGET: 'default'
  ANDROID_ARCH: 'x86_64'

jobs:
  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        test-suite: [emulator-detection, root-detection, file-tampering, integration]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ env.ANDROID_ARCH }}

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Cache Android Emulator
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ env.ANDROID_API_LEVEL }}-${{ env.ANDROID_TARGET }}-${{ env.ANDROID_ARCH }}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ env.ANDROID_ARCH }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Setup test environment
      run: |
        mkdir -p reports logs screenshots
        node scripts/setup.js
        chmod +x scripts/test-runner.sh

    - name: Run security tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ env.ANDROID_API_LEVEL }}
        target: ${{ env.ANDROID_TARGET }}
        arch: ${{ env.ANDROID_ARCH }}
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          export TEST_ENVIRONMENT=ci
          export DEVICE_TYPE=emulator
          npm run test:${{ matrix.test-suite }}

    - name: Generate test report
      if: always()
      run: |
        node scripts/report-generator.js generate ${{ matrix.test-suite }}
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-test-results-${{ matrix.test-suite }}
        path: |
          reports/
          logs/
        retention-days: 30

    - name: Upload test report to GitHub Pages
      if: github.ref == 'refs/heads/main' && matrix.test-suite == 'integration'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./reports
        destination_dir: security-reports

  security-analysis:
    runs-on: ubuntu-latest
    needs: security-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        pattern: security-test-results-*
        merge-multiple: true

    - name: Analyze security test results
      run: |
        npm ci
        node scripts/analyze-results.js
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './reports/security-summary.md';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ”’ Security Test Results\n\n${summary}`
            });
          }

  compliance-check:
    runs-on: ubuntu-latest
    needs: security-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        pattern: security-test-results-*
        merge-multiple: true

    - name: Generate compliance report
      run: |
        npm ci
        node scripts/report-generator.js compliance
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: reports/compliance-*.json
        retention-days: 90

  security-notifications:
    runs-on: ubuntu-latest
    needs: [security-tests, security-analysis]
    if: failure()
    
    steps:
    - name: Send security alert
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'ðŸš¨ Security Test Failure Alert';
          const body = `
          Security tests have failed in the mobile security automation framework.
          
          **Branch:** ${context.ref}
          **Commit:** ${context.sha}
          **Workflow:** ${context.workflow}
          **Run:** ${context.runNumber}
          
          Please review the test results and address any security issues immediately.
          
          [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          `;
          
          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent', 'bug']
            });
          } catch (error) {
            console.log('Could not create issue:', error.message);
          }